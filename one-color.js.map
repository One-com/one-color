{"version":3,"file":"one-color.js","sources":["lib/color.js","lib/HSV.js","minimal.js","lib/HSL.js"],"sourcesContent":["var installedColorSpaces = [];\nvar undef = function (obj) {\n  return typeof obj === 'undefined';\n};\nvar channelRegExp = /\\s*(\\.\\d+|\\d+(?:\\.\\d+)?)(%|deg)?\\s*/;\nvar percentageChannelRegExp = /\\s*(\\.\\d+|100|\\d?\\d(?:\\.\\d+)?)%\\s*/;\nvar cssColorRegExp = new RegExp(\n  '^(rgb|hsl|hsv)a?' +\n    '\\\\(' +\n    channelRegExp.source +\n    '[, ]' +\n    channelRegExp.source +\n    '[, ]' +\n    channelRegExp.source +\n    '(?:[,/]' +\n    channelRegExp.source +\n    ')?' +\n    '\\\\)$',\n  'i'\n);\n\nfunction divisor(unit, channelNumber, hasHue) {\n  if (unit === '%') {\n    return 100;\n  } else if (unit === 'deg' || (hasHue && channelNumber === 0)) {\n    return 360;\n  } else if (!unit) {\n    return 255;\n  }\n}\n\nfunction color(obj) {\n  if (Array.isArray(obj)) {\n    if (typeof obj[0] === 'string' && typeof color[obj[0]] === 'function') {\n      // Assumed array from .toJSON()\n      return new color[obj[0]](obj.slice(1, obj.length));\n    } else if (obj.length === 4) {\n      // Assumed 4 element int RGB array from canvas with all channels [0;255]\n      return new color.RGB(\n        obj[0] / 255,\n        obj[1] / 255,\n        obj[2] / 255,\n        obj[3] / 255\n      );\n    }\n  } else if (typeof obj === 'string') {\n    var lowerCased = obj.toLowerCase();\n    if (color.namedColors[lowerCased]) {\n      obj = '#' + color.namedColors[lowerCased];\n    }\n    if (lowerCased === 'transparent') {\n      obj = 'rgba(0,0,0,0)';\n    }\n    // Test for CSS rgb(....) string\n    var matchCssSyntax = obj.match(cssColorRegExp);\n    if (matchCssSyntax) {\n      var colorSpaceName = matchCssSyntax[1].toUpperCase();\n      var hasHue = colorSpaceName[0] === 'H';\n      if (undef(color[colorSpaceName])) {\n        throw new Error('color.' + colorSpaceName + ' is not installed.');\n      }\n\n      let alpha = undef(matchCssSyntax[8]) ? 1 : undefined;\n      if (alpha === undefined) {\n        if (matchCssSyntax[9] === '%') {\n          alpha = parseFloat(matchCssSyntax[8]) / 100;\n        } else {\n          alpha = parseFloat(matchCssSyntax[8]);\n        }\n      }\n      return new color[colorSpaceName](\n        parseFloat(matchCssSyntax[2]) / divisor(matchCssSyntax[3], 0, hasHue),\n        parseFloat(matchCssSyntax[4]) / divisor(matchCssSyntax[5], 1, hasHue),\n        parseFloat(matchCssSyntax[6]) / divisor(matchCssSyntax[7], 2, hasHue),\n        alpha\n      );\n    }\n    // Assume hex syntax\n    if (obj.length < 6) {\n      // Allow CSS shorthand\n      obj = obj.replace(\n        /^#?([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i,\n        '$1$1$2$2$3$3$4$4'\n      );\n    }\n    // Split obj into the red, green, blue, and optionally alpha component\n    var hexMatch = obj.match(\n      /^#?([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])?$/i\n    );\n\n    if (hexMatch) {\n      return new color.RGB(\n        parseInt(hexMatch[1], 16) / 255,\n        parseInt(hexMatch[2], 16) / 255,\n        parseInt(hexMatch[3], 16) / 255,\n        hexMatch[4] ? parseInt(hexMatch[4], 16) / 255 : 1\n      );\n    }\n\n    // No match so far. Lets try the less likely ones\n    if (color.CMYK) {\n      var cmykMatch = obj.match(\n        new RegExp(\n          '^cmyk' +\n            '\\\\(' +\n            percentageChannelRegExp.source +\n            ',' +\n            percentageChannelRegExp.source +\n            ',' +\n            percentageChannelRegExp.source +\n            ',' +\n            percentageChannelRegExp.source +\n            '\\\\)$',\n          'i'\n        )\n      );\n      if (cmykMatch) {\n        return new color.CMYK(\n          parseFloat(cmykMatch[1]) / 100,\n          parseFloat(cmykMatch[2]) / 100,\n          parseFloat(cmykMatch[3]) / 100,\n          parseFloat(cmykMatch[4]) / 100\n        );\n      }\n    }\n  } else if (typeof obj === 'object' && obj.isColor) {\n    return obj;\n  }\n  return false;\n}\n\ncolor.namedColors = {};\n\ncolor.installColorSpace = function (colorSpaceName, propertyNames, config) {\n  color[colorSpaceName] = function (a1) {\n    // ...\n    var args = Array.isArray(a1) ? a1 : arguments;\n    propertyNames.forEach(function (propertyName, i) {\n      var propertyValue = args[i];\n      if (propertyName === 'alpha') {\n        this._alpha =\n          isNaN(propertyValue) || propertyValue > 1\n            ? 1\n            : propertyValue < 0\n            ? 0\n            : propertyValue;\n      } else {\n        if (isNaN(propertyValue)) {\n          throw new Error(\n            '[' +\n              colorSpaceName +\n              ']: Invalid color: (' +\n              propertyNames.join(',') +\n              ')'\n          );\n        }\n        if (propertyName === 'hue') {\n          this._hue =\n            propertyValue < 0\n              ? propertyValue - Math.floor(propertyValue)\n              : propertyValue % 1;\n        } else {\n          this['_' + propertyName] =\n            propertyValue < 0 ? 0 : propertyValue > 1 ? 1 : propertyValue;\n        }\n      }\n    }, this);\n  };\n  color[colorSpaceName].propertyNames = propertyNames;\n\n  var prototype = color[colorSpaceName].prototype;\n\n  ['valueOf', 'hex', 'hexa', 'css', 'cssa'].forEach(function (methodName) {\n    prototype[methodName] =\n      prototype[methodName] ||\n      (colorSpaceName === 'RGB'\n        ? prototype.hex\n        : function () {\n            return this.rgb()[methodName]();\n          });\n  });\n\n  prototype.isColor = true;\n\n  prototype.equals = function (otherColor, epsilon) {\n    if (undef(epsilon)) {\n      epsilon = 1e-10;\n    }\n\n    otherColor = otherColor[colorSpaceName.toLowerCase()]();\n\n    for (var i = 0; i < propertyNames.length; i = i + 1) {\n      if (\n        Math.abs(\n          this['_' + propertyNames[i]] - otherColor['_' + propertyNames[i]]\n        ) > epsilon\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  prototype.toJSON = function () {\n    return [colorSpaceName].concat(\n      propertyNames.map(function (propertyName) {\n        return this['_' + propertyName];\n      }, this)\n    );\n  };\n\n  for (var propertyName in config) {\n    if (Object.prototype.hasOwnProperty.call(config, propertyName)) {\n      var matchFromColorSpace = propertyName.match(/^from(.*)$/);\n      if (matchFromColorSpace) {\n        color[matchFromColorSpace[1].toUpperCase()].prototype[\n          colorSpaceName.toLowerCase()\n        ] = config[propertyName];\n      } else {\n        prototype[propertyName] = config[propertyName];\n      }\n    }\n  }\n\n  // It is pretty easy to implement the conversion to the same color space:\n  prototype[colorSpaceName.toLowerCase()] = function () {\n    return this;\n  };\n  prototype.toString = function () {\n    return (\n      '[' +\n      colorSpaceName +\n      ' ' +\n      propertyNames\n        .map(function (propertyName) {\n          return this['_' + propertyName];\n        }, this)\n        .join(', ') +\n      ']'\n    );\n  };\n\n  // Generate getters and setters\n  propertyNames.forEach(function (propertyName) {\n    var shortName = propertyName === 'black' ? 'k' : propertyName.charAt(0);\n    prototype[propertyName] = prototype[shortName] = function (value, isDelta) {\n      // Simple getter mode: color.red()\n      if (typeof value === 'undefined') {\n        return this['_' + propertyName];\n      } else if (isDelta) {\n        // Adjuster: color.red(+.2, true)\n        return new this.constructor(\n          propertyNames.map(function (otherPropertyName) {\n            return (\n              this['_' + otherPropertyName] +\n              (propertyName === otherPropertyName ? value : 0)\n            );\n          }, this)\n        );\n      } else {\n        // Setter: color.red(.2);\n        return new this.constructor(\n          propertyNames.map(function (otherPropertyName) {\n            return propertyName === otherPropertyName\n              ? value\n              : this['_' + otherPropertyName];\n          }, this)\n        );\n      }\n    };\n  });\n\n  function installForeignMethods(targetColorSpaceName, sourceColorSpaceName) {\n    var obj = {};\n    obj[sourceColorSpaceName.toLowerCase()] = function () {\n      return this.rgb()[sourceColorSpaceName.toLowerCase()]();\n    };\n    color[sourceColorSpaceName].propertyNames.forEach(function (propertyName) {\n      var shortName = propertyName === 'black' ? 'k' : propertyName.charAt(0);\n      obj[propertyName] = obj[shortName] = function (value, isDelta) {\n        return this[sourceColorSpaceName.toLowerCase()]()[propertyName](\n          value,\n          isDelta\n        );\n      };\n    });\n    for (var prop in obj) {\n      if (\n        Object.prototype.hasOwnProperty.call(obj, prop) &&\n        color[targetColorSpaceName].prototype[prop] === undefined\n      ) {\n        color[targetColorSpaceName].prototype[prop] = obj[prop];\n      }\n    }\n  }\n\n  installedColorSpaces.forEach(function (otherColorSpaceName) {\n    installForeignMethods(colorSpaceName, otherColorSpaceName);\n    installForeignMethods(otherColorSpaceName, colorSpaceName);\n  });\n\n  installedColorSpaces.push(colorSpaceName);\n  return color;\n};\n\ncolor.pluginList = [];\n\ncolor.use = function (plugin) {\n  if (color.pluginList.indexOf(plugin) === -1) {\n    this.pluginList.push(plugin);\n    plugin(color);\n  }\n  return color;\n};\n\ncolor.installMethod = function (name, fn) {\n  installedColorSpaces.forEach(function (colorSpace) {\n    color[colorSpace].prototype[name] = fn;\n  });\n  return this;\n};\n\ncolor.installColorSpace('RGB', ['red', 'green', 'blue', 'alpha'], {\n  hex: function () {\n    var hexString = (\n      Math.round(255 * this._red) * 0x10000 +\n      Math.round(255 * this._green) * 0x100 +\n      Math.round(255 * this._blue)\n    ).toString(16);\n    return '#' + '00000'.substr(0, 6 - hexString.length) + hexString;\n  },\n\n  hexa: function () {\n    var alphaString = Math.round(this._alpha * 255).toString(16);\n    return this.hex() + '00'.substr(0, 2 - alphaString.length) + alphaString;\n  },\n\n  css: function () {\n    return (\n      'rgb(' +\n      Math.round(255 * this._red) +\n      ',' +\n      Math.round(255 * this._green) +\n      ',' +\n      Math.round(255 * this._blue) +\n      ')'\n    );\n  },\n\n  cssa: function () {\n    return (\n      'rgba(' +\n      Math.round(255 * this._red) +\n      ',' +\n      Math.round(255 * this._green) +\n      ',' +\n      Math.round(255 * this._blue) +\n      ',' +\n      this._alpha +\n      ')'\n    );\n  },\n});\n\nmodule.exports = color;\n","module.exports = function HSV(color) {\n  color.installColorSpace('HSV', ['hue', 'saturation', 'value', 'alpha'], {\n    rgb: function () {\n      var hue = this._hue;\n      var saturation = this._saturation;\n      var value = this._value;\n      var i = Math.min(5, Math.floor(hue * 6));\n      var f = hue * 6 - i;\n      var p = value * (1 - saturation);\n      var q = value * (1 - f * saturation);\n      var t = value * (1 - (1 - f) * saturation);\n      var red;\n      var green;\n      var blue;\n      switch (i) {\n        case 0:\n          red = value;\n          green = t;\n          blue = p;\n          break;\n        case 1:\n          red = q;\n          green = value;\n          blue = p;\n          break;\n        case 2:\n          red = p;\n          green = value;\n          blue = t;\n          break;\n        case 3:\n          red = p;\n          green = q;\n          blue = value;\n          break;\n        case 4:\n          red = t;\n          green = p;\n          blue = value;\n          break;\n        case 5:\n          red = value;\n          green = p;\n          blue = q;\n          break;\n      }\n      return new color.RGB(red, green, blue, this._alpha);\n    },\n\n    hsl: function () {\n      var l = (2 - this._saturation) * this._value;\n      var sv = this._saturation * this._value;\n      var svDivisor = l <= 1 ? l : 2 - l;\n      var saturation;\n\n      // Avoid division by zero when lightness approaches zero:\n      if (svDivisor < 1e-9) {\n        saturation = 0;\n      } else {\n        saturation = sv / svDivisor;\n      }\n      return new color.HSL(this._hue, saturation, l / 2, this._alpha);\n    },\n\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.hsv\n      var red = this._red;\n      var green = this._green;\n      var blue = this._blue;\n      var max = Math.max(red, green, blue);\n      var min = Math.min(red, green, blue);\n      var delta = max - min;\n      var hue;\n      var saturation = max === 0 ? 0 : delta / max;\n      var value = max;\n      if (delta === 0) {\n        hue = 0;\n      } else {\n        switch (max) {\n          case red:\n            hue = (green - blue) / delta / 6 + (green < blue ? 1 : 0);\n            break;\n          case green:\n            hue = (blue - red) / delta / 6 + 1 / 3;\n            break;\n          case blue:\n            hue = (red - green) / delta / 6 + 2 / 3;\n            break;\n        }\n      }\n      return new color.HSV(hue, saturation, value, this._alpha);\n    },\n  });\n};\n","module.exports = require('./lib/color')\n  .use(require('./lib/HSV'))\n  .use(require('./lib/HSL'));\n","module.exports = function HSL(color) {\n  color.use(require('./HSV'));\n\n  color.installColorSpace('HSL', ['hue', 'saturation', 'lightness', 'alpha'], {\n    hsv: function () {\n      // Algorithm adapted from http://wiki.secondlife.com/wiki/Color_conversion_scripts\n      var l = this._lightness * 2;\n      var s = this._saturation * (l <= 1 ? l : 2 - l);\n      var saturation;\n\n      // Avoid division by zero when l + s is very small (approaching black):\n      if (l + s < 1e-9) {\n        saturation = 0;\n      } else {\n        saturation = (2 * s) / (l + s);\n      }\n\n      return new color.HSV(this._hue, saturation, (l + s) / 2, this._alpha);\n    },\n\n    rgb: function () {\n      return this.hsv().rgb();\n    },\n\n    fromRgb: function () {\n      // Becomes one.color.RGB.prototype.hsv\n      return this.hsv().hsl();\n    },\n  });\n};\n"],"names":["installedColorSpaces","undef","obj","channelRegExp","percentageChannelRegExp","cssColorRegExp","RegExp","source","divisor","unit","channelNumber","hasHue","color","Array","isArray","slice","length","RGB","lowerCased","toLowerCase","namedColors","matchCssSyntax","match","colorSpaceName","toUpperCase","Error","alpha","undefined","parseFloat","replace","hexMatch","parseInt","CMYK","cmykMatch","isColor","installColorSpace","propertyNames","config","a1","args","arguments","forEach","propertyName","i","propertyValue","this","_alpha","isNaN","join","_hue","Math","floor","prototype","methodName","hex","rgb","equals","otherColor","epsilon","abs","toJSON","concat","map","Object","hasOwnProperty","call","matchFromColorSpace","installForeignMethods","targetColorSpaceName","sourceColorSpaceName","prop","shortName","charAt","value","isDelta","toString","constructor","otherPropertyName","otherColorSpaceName","push","pluginList","use","plugin","indexOf","installMethod","name","fn","colorSpace","hexString","round","_red","_green","_blue","substr","hexa","alphaString","css","cssa","red","green","blue","hue","saturation","_saturation","_value","min","f","p","q","t","hsl","l","sv","svDivisor","HSL","fromRgb","max","delta","HSV","require$$1","require$$0","hsv","_lightness","s"],"mappings":"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"}